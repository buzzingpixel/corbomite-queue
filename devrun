#!/usr/bin/env php
<?php
declare(strict_types=1);

/**
 * @author TJ Draper <tj@buzzingpixel.com>
 * @copyright 2019 BuzzingPixel, LLC
 * @license Apache-2.0
 */

use corbomite\di\Di;

putenv('DB_HOST=db');
putenv('DB_DATABASE=site');
putenv('DB_USER=site');
putenv('DB_PASSWORD=secret');
putenv('CORBOMITE_DB_DATA_NAMESPACE=corbomite\queue\data');
putenv('CORBOMITE_DB_DATA_DIRECTORY=./src/data');

require __DIR__ . '/vendor/autoload.php';

////////////////////////////////////////////////////////////////////////////////

use corbomite\queue\Noop;
use corbomite\queue\QueueApi;
use corbomite\queue\services\DeadBatchCheckService;

function testAddToQueue() {
    /** @noinspection PhpUnhandledExceptionInspection */
    $queueApi = Di::diContainer()->get(QueueApi::class);

    $batchModel = $queueApi->makeActionQueueBatchModel([
        'name' => 'this_is_a_test',
        'title' => 'This is a Test',
        'items' => [
            $queueApi->makeActionQueueItemModel([
                'class' => Noop::class,
            ]),
            $queueApi->makeActionQueueItemModel([
                'class' => Noop::class,
            ]),
            $queueApi->makeActionQueueItemModel([
                'class' => Noop::class,
                'method' => 'noop',
                'context' => [
                    'stuff' => 'thing',
                ],
            ]),
        ],
        'context' => [
            'test' => 'thing',
        ],
    ]);

    /** @noinspection PhpUnhandledExceptionInspection */
    $queueApi->addToQueue($batchModel);
}
// testAddToQueue();
// die;

function testGetNextQueueItem() {
    /** @noinspection PhpUnhandledExceptionInspection */
    $queueApi = Di::diContainer()->get(QueueApi::class);

    $item = $queueApi->getNextQueueItem();

    var_dump($item);
}
// testGetNextQueueItem();
// die;

function testMarkAsStoppedDueToError() {
    /** @noinspection PhpUnhandledExceptionInspection */
    $queueApi = Di::diContainer()->get(QueueApi::class);

    $queueApi->markAsStoppedDueToError($queueApi->getNextQueueItem());
}
// testMarkAsStoppedDueToError();
// die;

function testMarkItemAsRun() {
    /** @noinspection PhpUnhandledExceptionInspection */
    $queueApi = Di::diContainer()->get(QueueApi::class);

    $queueApi->markItemAsRun($queueApi->getNextQueueItem());
}
// testMarkItemAsRun();
// die;

function runDeadBatchCheckService()
{
    /** @noinspection PhpUnhandledExceptionInspection */
    $deadBatchService = Di::diContainer()->get(DeadBatchCheckService::class);

    /** @noinspection PhpUnhandledExceptionInspection */
    $deadBatchService();
}
// runDeadBatchCheckService();
// die;
